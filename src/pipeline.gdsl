
//The global script scope
def ctx = context(scope: scriptScope())
contributor(ctx) {
method(name: 'ansiColor', type: 'Object', params: [colorMapName:java.lang.String, body:'Closure'], doc: 'Color ANSI Console Output')
method(name: 'awsIdentity', type: 'Object', params: [:], doc: 'Print the AWS identity')
method(name: 'bitbucketStatusNotify', type: 'Object', params: [buildState:'java.lang.String'], doc: 'Notify a build status to BitBucket.')
method(name: 'bitbucketStatusNotify', type: 'Object', namedParams: [parameter(name: 'buildState', type: 'java.lang.String'), parameter(name: 'buildDescription', type: 'java.lang.String'), parameter(name: 'buildKey', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), ], doc: 'Notify a build status to BitBucket.')
method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
method(name: 'cache', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'maxCacheSize', type: 'long'), parameter(name: 'caches', type: 'Map'), ], doc: 'Caches files from previous build to current build')
method(name: 'cfInvalidate', type: 'Object', namedParams: [parameter(name: 'distribution', type: 'java.lang.String'), parameter(name: 'paths', type: 'Map'), ], doc: 'Invalidate given paths in CloudFront distribution')
method(name: 'cfnDelete', type: 'Object', params: [stack:'java.lang.String'], doc: 'Delete CloudFormation stack')
method(name: 'cfnDescribe', type: 'Object', params: [stack:'java.lang.String'], doc: 'Describe outputs of CloudFormation stack')
method(name: 'cfnExports', type: 'Object', params: [:], doc: 'Describe CloudFormation global exports')
method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
method(name: 'emailext', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'attachLog', type: 'boolean'), parameter(name: 'attachmentsPattern', type: 'java.lang.String'), parameter(name: 'compressLog', type: 'boolean'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'recipientProviders', type: 'Map'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Extended Email')
method(name: 'emailextrecipients', type: 'Object', params: [recipientProviders:'Map'], doc: 'Extended Email Recipients')
method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
method(name: 'githubNotify', type: 'Object', namedParams: [parameter(name: 'status', type: 'Map'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'account', type: 'java.lang.String'), parameter(name: 'context', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'gitApiUrl', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'sha', type: 'java.lang.String'), parameter(name: 'targetUrl', type: 'java.lang.String'), ], doc: 'Notifies GitHub of the status of a Pull Request')
method(name: 'hipchatSend', type: 'Object', params: [message:'java.lang.String'], doc: 'Send HipChat Message')
method(name: 'hipchatSend', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'color', type: 'Map'), parameter(name: 'credentialId', type: 'java.lang.String'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'notify', type: 'boolean'), parameter(name: 'room', type: 'java.lang.String'), parameter(name: 'sendAs', type: 'java.lang.String'), parameter(name: 'server', type: 'java.lang.String'), parameter(name: 'textFormat', type: 'boolean'), parameter(name: 'token', type: 'java.lang.String'), parameter(name: 'v2enabled', type: 'java.lang.Boolean'), ], doc: 'Send HipChat Message')
method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'Map'), parameter(name: 'customHeaders', type: 'Map'), parameter(name: 'httpMode', type: 'Map'), parameter(name: 'ignoreSslErrors', type: 'boolean'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), ], doc: 'Perform an HTTP Request and return a response object')
method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
method(name: 'jiraAddComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Add Comment')
method(name: 'jiraAddWatcher', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'userName', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Add Watcher')
method(name: 'jiraAssignIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'userName', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Assign Issue')
method(name: 'jiraAssignableUserSearch', type: 'Object', namedParams: [parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'queryStr', type: 'java.lang.String'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: Searches assignable JIRA Users by username, name or email address for the given project/issueKey')
method(name: 'jiraDeleteIssueLink', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Delete IssueLink')
method(name: 'jiraDeleteIssueLink', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete IssueLink')
method(name: 'jiraDeleteIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'linkId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Issue\'s Remote Link by linkId.')
method(name: 'jiraDeleteIssueRemoteLinks', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'globalId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Issue\'s Remote Links by globalId.')
method(name: 'jiraEditComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'commentId', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Issue Comment')
method(name: 'jiraEditComponent', type: 'Object', params: [component:'Map'], doc: 'JIRA Steps: Edit Component')
method(name: 'jiraEditComponent', type: 'Object', namedParams: [parameter(name: 'component', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Component')
method(name: 'jiraEditIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'issue', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Issue')
method(name: 'jiraEditVersion', type: 'Object', params: [version:'Map'], doc: 'JIRA Steps: Edit Version')
method(name: 'jiraEditVersion', type: 'Object', namedParams: [parameter(name: 'version', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Version')
method(name: 'jiraGetComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'commentId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Comment')
method(name: 'jiraGetComments', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Comments')
method(name: 'jiraGetComments', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Comments')
method(name: 'jiraGetComponent', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Component')
method(name: 'jiraGetComponent', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Component')
method(name: 'jiraGetComponentIssueCount', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Component Issue Count')
method(name: 'jiraGetComponentIssueCount', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Component Issue Count')
method(name: 'jiraGetFields', type: 'Object', params: [:], doc: 'JIRA Steps: Get Fields')
method(name: 'jiraGetFields', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Fields')
method(name: 'jiraGetIssue', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue')
method(name: 'jiraGetIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue')
method(name: 'jiraGetIssueLink', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get IssueLink')
method(name: 'jiraGetIssueLink', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get IssueLink')
method(name: 'jiraGetIssueLinkTypes', type: 'Object', params: [:], doc: 'JIRA Steps: Get Issue Link Types')
method(name: 'jiraGetIssueLinkTypes', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Link Types')
method(name: 'jiraGetIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'linkId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue\'s Remote Link by linkId.')
method(name: 'jiraGetIssueRemoteLinks', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'globalId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue\'s Remote Links by globalId.')
method(name: 'jiraGetIssueTransitions', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Transitions')
method(name: 'jiraGetIssueTransitions', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Transitions')
method(name: 'jiraGetIssueWatches', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Watches')
method(name: 'jiraGetIssueWatches', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Watches')
method(name: 'jiraGetProject', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project')
method(name: 'jiraGetProject', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project')
method(name: 'jiraGetProjectComponents', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Components')
method(name: 'jiraGetProjectComponents', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Components')
method(name: 'jiraGetProjectStatuses', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Statuses')
method(name: 'jiraGetProjectStatuses', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Statuses')
method(name: 'jiraGetProjectVersions', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Versions')
method(name: 'jiraGetProjectVersions', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Versions')
method(name: 'jiraGetProjects', type: 'Object', params: [:], doc: 'JIRA Steps: Get Projects')
method(name: 'jiraGetProjects', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Projects')
method(name: 'jiraGetVersion', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Version')
method(name: 'jiraGetVersion', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Version')
method(name: 'jiraJqlSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'JIRA Steps: JQL Search')
method(name: 'jiraJqlSearch', type: 'Object', namedParams: [parameter(name: 'jql', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: JQL Search')
method(name: 'jiraLinkIssues', type: 'Object', namedParams: [parameter(name: 'type', type: 'java.lang.String'), parameter(name: 'inwardKey', type: 'java.lang.String'), parameter(name: 'outwardKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Link Issues')
method(name: 'jiraNewComponent', type: 'Object', params: [component:'Map'], doc: 'JIRA Steps: Create New Component')
method(name: 'jiraNewComponent', type: 'Object', namedParams: [parameter(name: 'component', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Component')
method(name: 'jiraNewIssue', type: 'Object', params: [issue:'Map'], doc: 'JIRA Steps: Create New Issue')
method(name: 'jiraNewIssue', type: 'Object', namedParams: [parameter(name: 'issue', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Issue')
method(name: 'jiraNewIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'remoteLink', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create new remote link for given issue.')
method(name: 'jiraNewIssues', type: 'Object', params: [issues:'Map'], doc: 'JIRA Steps: Create New Issues')
method(name: 'jiraNewIssues', type: 'Object', namedParams: [parameter(name: 'issues', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Issues')
method(name: 'jiraNewVersion', type: 'Object', params: [version:'Map'], doc: 'JIRA Steps: Create New Version')
method(name: 'jiraNewVersion', type: 'Object', namedParams: [parameter(name: 'version', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Version')
method(name: 'jiraNotifyIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'notify', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Notify Issue')
method(name: 'jiraTransitionIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'input', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Transition Issue')
method(name: 'jiraUserSearch', type: 'Object', params: [queryStr:'java.lang.String'], doc: 'JIRA Steps: Search Active JIRA Users by username, name or email address.')
method(name: 'jiraUserSearch', type: 'Object', namedParams: [parameter(name: 'queryStr', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: Search Active JIRA Users by username, name or email address.')
method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), ], doc: 'The milestone step forces all builds to go through in order')
method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
method(name: 'properties', type: 'Object', params: [properties:'Map'], doc: 'Set job properties')
method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
method(name: 'registerWebhook', type: 'Object', params: [:], doc: 'Creates and returns a webhook that can be used by an external system to notify a pipeline')
method(name: 'release', type: 'Object', params: [job:'java.lang.String'], doc: 'Trigger release for the job')
method(name: 'release', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), ], doc: 'Trigger release for the job')
method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'Map'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
method(name: 'selectRun', type: 'Object', params: [job:'java.lang.String'], doc: 'Select Run')
method(name: 'selectRun', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'filter', type: 'Map'), parameter(name: 'selector', type: 'Map'), parameter(name: 'verbose', type: 'boolean'), ], doc: 'Select Run')
method(name: 'setGitHubPullRequestStatus', type: 'Object', params: [:], doc: 'Set GitHub PullRequest Commit Status')
method(name: 'setGitHubPullRequestStatus', type: 'Object', namedParams: [parameter(name: 'context', type: 'java.lang.String'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'state', type: 'Map'), ], doc: 'Set GitHub PullRequest Commit Status')
method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
method(name: 'snsPublish', type: 'Object', namedParams: [parameter(name: 'topicArn', type: 'java.lang.String'), parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'message', type: 'java.lang.String'), ], doc: 'Publish notification to SNS')
method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')
method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: 'Timestamps')
method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
method(name: 'waitForWebhook', type: 'Object', params: [webhookToken:'Map'], doc: 'Wait for webhook to be posted to by external system')
method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
method(name: 'walk', type: 'Object', params: [job:'java.lang.String'], doc: 'Execute a pipeline task for the job and all its downstream jobs.')
method(name: 'walk', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'failOnUnstable', type: 'java.lang.Boolean'), parameter(name: 'jobAction', type: 'java.lang.String'), ], doc: 'Execute a pipeline task for the job and all its downstream jobs.')
method(name: 'withAWS', type: 'Object', params: [body:'Closure'], doc: 'set AWS settings for nested block')
method(name: 'withAWS', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'java.lang.String'), parameter(name: 'externalId', type: 'java.lang.String'), parameter(name: 'profile', type: 'java.lang.String'), parameter(name: 'region', type: 'java.lang.String'), parameter(name: 'role', type: 'java.lang.String'), parameter(name: 'roleAccount', type: 'java.lang.String'), ], doc: 'set AWS settings for nested block')
method(name: 'withCredentials', type: 'Object', params: [bindings:Map, body:'Closure'], doc: 'Bind credentials to variables')
method(name: 'withEnv', type: 'Object', params: [overrides:Map, body:'Closure'], doc: 'Set environment variables')
method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
method(name: 'AddInteractivePromotion', type: 'Object', namedParams: [parameter(name: 'promotionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), parameter(name: 'displayName', type: 'java.lang.String'), ], doc: 'Add Interactive promotion')
method(name: 'artifactoryDistributeBuild', type: 'Object', namedParams: [parameter(name: 'distributionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Distribute build')
method(name: 'artifactoryPromoteBuild', type: 'Object', namedParams: [parameter(name: 'promotionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Promote build')
method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Advanced/Deprecated Catch error and set build result')
method(name: 'collectEnv', type: 'Object', params: [env:'Map'], doc: 'Advanced/Deprecated Collect environment variables and system properties')
method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')
method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
method(name: 'getArtifactoryServer', type: 'Object', params: [artifactoryServerID:'java.lang.String'], doc: 'Advanced/Deprecated Get Artifactory server from Jenkins config')
method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
method(name: 'newBuildInfo', type: 'Object', params: [:], doc: 'Advanced/Deprecated New buildInfo')
method(name: 'newGradleBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory gradle executor')
method(name: 'newMavenBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory maven')
method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
method(name: 'xrayScanBuild', type: 'Object', namedParams: [parameter(name: 'xrayScanConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Xray build scanning')
property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
property(name: 'simpleBuild', type: 'org.jenkinsci.plugins.simplebuild.SimpleBuildDSL')
property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
property(name: 'fileLoader', type: 'org.jenkinsci.plugins.workflow.remoteloader.FileLoaderDSL')
property(name: 'Artifactory', type: 'org.jfrog.hudson.pipeline.dsl.ArtifactoryDSL')
}
//Steps that require a node context
def nodeCtx = context(scope: closureScope())
contributor(nodeCtx) {
    def call = enclosingCall('node')
    if (call) {
method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')
method(name: 'cfnUpdate', type: 'Object', namedParams: [parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'params', type: 'Map'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'tags', type: 'Map'), ], doc: 'Create or Update CloudFormation stack')
method(name: 'cfnValidate', type: 'Object', params: [file:'java.lang.String'], doc: 'Validate CloudFormation template')
method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'General SCM')
method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'General SCM')
method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')
method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
method(name: 'gatlingArchive', type: 'Object', params: [:], doc: 'Archive Gatling reports')
method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')
method(name: 'liquibaseDbDoc', type: 'Object', params: [changeLogFile:'java.lang.String'], doc: 'Generate Liquibase DbDoc')
method(name: 'liquibaseDbDoc', type: 'Object', namedParams: [parameter(name: 'changeLogFile', type: 'java.lang.String'), parameter(name: 'basePath', type: 'java.lang.String'), parameter(name: 'changeLogParameterList', type: 'Map'), parameter(name: 'changeLogParameters', type: 'java.lang.String'), parameter(name: 'classpath', type: 'java.lang.String'), parameter(name: 'contexts', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'databaseEngine', type: 'java.lang.String'), parameter(name: 'defaultSchemaName', type: 'java.lang.String'), parameter(name: 'driverClassname', type: 'java.lang.String'), parameter(name: 'labels', type: 'java.lang.String'), parameter(name: 'liquibasePropertiesPath', type: 'java.lang.String'), parameter(name: 'outputDirectory', type: 'java.lang.String'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Generate Liquibase DbDoc')
method(name: 'liquibaseRollback', type: 'Object', params: [changeLogFile:'java.lang.String'], doc: 'Roll back liquibase changes')
method(name: 'liquibaseRollback', type: 'Object', namedParams: [parameter(name: 'changeLogFile', type: 'java.lang.String'), parameter(name: 'basePath', type: 'java.lang.String'), parameter(name: 'changeLogParameterList', type: 'Map'), parameter(name: 'changeLogParameters', type: 'java.lang.String'), parameter(name: 'classpath', type: 'java.lang.String'), parameter(name: 'contexts', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'databaseEngine', type: 'java.lang.String'), parameter(name: 'defaultSchemaName', type: 'java.lang.String'), parameter(name: 'driverClassname', type: 'java.lang.String'), parameter(name: 'labels', type: 'java.lang.String'), parameter(name: 'liquibasePropertiesPath', type: 'java.lang.String'), parameter(name: 'rollbackCount', type: 'int'), parameter(name: 'rollbackLastHours', type: 'java.lang.String'), parameter(name: 'rollbackToDate', type: 'java.lang.String'), parameter(name: 'rollbackToTag', type: 'java.lang.String'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Roll back liquibase changes')
method(name: 'liquibaseUpdate', type: 'Object', params: [changeLogFile:'java.lang.String'], doc: 'Evaluate liquibase changesets')
method(name: 'liquibaseUpdate', type: 'Object', namedParams: [parameter(name: 'changeLogFile', type: 'java.lang.String'), parameter(name: 'basePath', type: 'java.lang.String'), parameter(name: 'changeLogParameterList', type: 'Map'), parameter(name: 'changeLogParameters', type: 'java.lang.String'), parameter(name: 'classpath', type: 'java.lang.String'), parameter(name: 'contexts', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'databaseEngine', type: 'java.lang.String'), parameter(name: 'defaultSchemaName', type: 'java.lang.String'), parameter(name: 'driverClassname', type: 'java.lang.String'), parameter(name: 'dropAll', type: 'boolean'), parameter(name: 'labels', type: 'java.lang.String'), parameter(name: 'liquibasePropertiesPath', type: 'java.lang.String'), parameter(name: 'tagOnSuccessfulBuild', type: 'boolean'), parameter(name: 'testRollbacks', type: 'boolean'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Evaluate liquibase changesets')
method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')
method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
method(name: 's3Download', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'force', type: 'boolean'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Copy file from S3')
method(name: 's3Upload', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Copy file to S3')
method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')
method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')
method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
method(name: 'svn', type: 'Object', params: [url:'java.lang.String'], doc: 'Subversion')
method(name: 'svn', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Subversion')
method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'read', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Zip file')
method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
method(name: 'withMaven', type: 'Object', params: [body:'Closure'], doc: 'Provide Maven environment')
method(name: 'withMaven', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'globalMavenSettingsConfig', type: 'java.lang.String'), parameter(name: 'globalMavenSettingsFilePath', type: 'java.lang.String'), parameter(name: 'jdk', type: 'java.lang.String'), parameter(name: 'maven', type: 'java.lang.String'), parameter(name: 'mavenLocalRepo', type: 'java.lang.String'), parameter(name: 'mavenOpts', type: 'java.lang.String'), parameter(name: 'mavenSettingsConfig', type: 'java.lang.String'), parameter(name: 'mavenSettingsFilePath', type: 'java.lang.String'), parameter(name: 'options', type: 'Map'), ], doc: 'Provide Maven environment')
method(name: 'withNPM', type: 'Object', params: [body:'Closure'], doc: 'Provide NPM environment')
method(name: 'withNPM', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'npmrcConfig', type: 'java.lang.String'), ], doc: 'Provide NPM environment')
method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'json', type: 'Map'), ], doc: 'Write JSON to a file in the workspace.')
method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Create Zip file')
method(name: 'ArtifactoryGradleBuild', type: 'Object', namedParams: [parameter(name: 'gradleBuild', type: 'Map'), parameter(name: 'tool', type: 'java.lang.String'), parameter(name: 'rootDir', type: 'java.lang.String'), parameter(name: 'buildFile', type: 'java.lang.String'), parameter(name: 'tasks', type: 'java.lang.String'), parameter(name: 'switches', type: 'java.lang.String'), parameter(name: 'useWrapper', type: 'boolean'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'usesPlugin', type: 'boolean'), ], doc: 'run Artifactory gradle')
method(name: 'ArtifactoryMavenBuild', type: 'Object', namedParams: [parameter(name: 'mavenBuild', type: 'Map'), parameter(name: 'tool', type: 'java.lang.String'), parameter(name: 'pom', type: 'java.lang.String'), parameter(name: 'goals', type: 'java.lang.String'), parameter(name: 'opts', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'run Artifactory maven')
method(name: 'ConanAddRemote', type: 'Object', namedParams: [parameter(name: 'serverUrl', type: 'java.lang.String'), parameter(name: 'serverName', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), ], doc: 'Add new repo to Conan config')
method(name: 'ConanAddUser', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'serverName', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), ], doc: 'Add new user to Conan config')
method(name: 'InitConanClient', type: 'Object', params: [client:'Map'], doc: 'Advanced/Deprecated Create Conan Client')
method(name: 'MavenDescriptorStep', type: 'Object', namedParams: [parameter(name: 'pomFile', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'versionPerModule', type: 'Map'), parameter(name: 'failOnSnapshot', type: 'boolean'), parameter(name: 'dryRun', type: 'boolean'), ], doc: 'Get Artifactory Maven descriptor')
method(name: 'RunConanCommand', type: 'Object', namedParams: [parameter(name: 'command', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), parameter(name: 'buildLogPath', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Run a Conan command')
method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
method(name: 'artifactoryDownload', type: 'Object', namedParams: [parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Download artifacts')
method(name: 'artifactoryUpload', type: 'Object', namedParams: [parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Upload artifacts')
method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image used in FROM')
method(name: 'dockerPullStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'credentialsConfig', type: 'Map'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Artifactory docker pull')
method(name: 'dockerPushStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'credentialsConfig', type: 'Map'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'targetRepo', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Artifactory docker push')
method(name: 'newArtifactoryServer', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'username', type: 'java.lang.String'), parameter(name: 'password', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), ], doc: 'Returns new Artifactory server')
method(name: 'publishBuildInfo', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Publish build Info to Artifactory')
method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'Map'), ], doc: 'Copy archived artifacts into the workspace')
method(name: 'withDockerContainer', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
method(name: 'withDockerContainer', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Run build steps inside a Docker container')
method(name: 'withDockerRegistry', type: 'Object', params: [registry:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
method(name: 'withDockerServer', type: 'Object', params: [server:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
    }
}

// Errors on:
// class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep: There's no @DataBoundConstructor on any constructor of class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep
